/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 20 13:00:59 IRST 2020
 */

package test;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[3];
      intArray1[0] = (-1);
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        matrix0.matrixMinus(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("test.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      int[][] intArray0 = new int[3][3];
      int[][] intArray1 = matrix0.matrixAdder(intArray0, intArray0);
      int[][] intArray2 = matrix0.matrixMinus(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      // Undeclared exception!
      try { 
        matrix0.matrixMinus((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("test.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.countProvider((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[][] intArray0 = new int[17][3];
      boolean boolean0 = Matrix.countProvider(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[][] intArray0 = new int[3][4];
      boolean boolean0 = Matrix.countProvider(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      int[][] intArray0 = new int[3][3];
      int[][] intArray1 = matrix0.matrixAdder(intArray0, intArray0);
      assertEquals(3, intArray1.length);
      
      int[][] intArray2 = matrix0.matrixAdder(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      int[][] intArray0 = new int[1][2];
      // Undeclared exception!
      try { 
        matrix0.matrixAdder(intArray0, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The input array cannot be null.
         //
         verifyException("test.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      // Undeclared exception!
      try { 
        matrix0.matrixAdder((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The input array cannot be null.
         //
         verifyException("test.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      int[][] intArray0 = new int[3][3];
      int[][] intArray1 = new int[0][0];
      // Undeclared exception!
      try { 
        matrix0.matrixAdder(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // The size of the matrices aren't correct.
         //
         verifyException("test.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[][] intArray0 = new int[3][3];
      boolean boolean0 = Matrix.countProvider(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      int[][] intArray0 = new int[3][3];
      int[] intArray1 = new int[2];
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
    	  
        matrix0.matrixAdder(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // The size of the matrices aren't correct.
         //
         verifyException("test.Matrix", e);
      }
  }
}
